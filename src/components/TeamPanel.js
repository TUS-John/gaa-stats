import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useMemo } from 'react';
import { POSITION_UI_ORDER, POSITIONS } from '../state/constants';
import SubForm from './SubForm';
import MoveForm from './MoveForm';
export default function TeamPanel({ teamIdx, team, gameSeconds, expandedNumber, setExpandedNumber, onScore, onCard, onSub, onMove, reds, yellows }) {
    const redSet = new Set(Object.keys(reds || {}).filter((k) => k.startsWith(teamIdx + "|")).map((k) => Number(k.split("|")[1])));
    const sinBinSet = new Set(Object.entries(yellows || {}).filter(([k, recs]) => k.startsWith(teamIdx + "|") && recs.some((r) => r.expiresAt > gameSeconds)).map(([k]) => Number(k.split("|")[1])));
    const onFieldNumbers = team.onField;
    const benchNumbers = useMemo(() => { const s = new Set(onFieldNumbers.filter(Boolean)); const list = []; for (let n = 1; n <= 30; n++)
        if (!s.has(n))
            list.push(n); return list; }, [onFieldNumbers]);
    const logThenClose = (fn) => { fn(); setExpandedNumber(null); };
    const Btn = (label, classes, onClick) => (_jsx("button", { className: `py-2 rounded-xl ${classes}`, onClick: onClick, children: label }));
    return (_jsxs("div", { className: "bg-white rounded-2xl shadow p-3 space-y-3", children: [_jsxs("div", { className: "grid grid-cols-1 gap-2", children: [_jsxs("div", { className: `w-full border rounded-xl ${expandedNumber === 0 ? 'ring-2 ring-black' : ''}`, children: [_jsxs("button", { className: "w-full text-left p-2 flex items-center justify-between bg-white rounded-xl", onClick: () => setExpandedNumber(0), children: [_jsxs("div", { children: [_jsx("div", { className: "text-xs uppercase text-gray-500", children: "Unknown" }), _jsx("div", { className: "text-base font-semibold", children: "#? \u00B7 Unknown" })] }), _jsx("div", { className: "text-xs text-gray-400", children: "Tap to log" })] }), expandedNumber === 0 && (_jsx("div", { className: "p-2 pt-0", children: _jsxs("div", { className: "grid grid-cols-2 gap-2", children: [_jsxs("div", { className: "grid grid-cols-1 gap-2", children: [Btn('Point (Play)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'point', via: 'play', playerNumber: 0 }))), Btn('Goal (Play)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'goal', via: 'play', playerNumber: 0 }))), Btn('Yellow Card', 'bg-yellow-400', () => logThenClose(() => onCard({ teamIdx, card: 'yellow', playerNumber: 0 })))] }), _jsxs("div", { className: "grid grid-cols-1 gap-2", children: [Btn('Point (Free)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'point', via: 'free', playerNumber: 0 }))), Btn('Goal (Free)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'goal', via: 'free', playerNumber: 0 }))), Btn('Red Card', 'bg-red-600 text-white', () => logThenClose(() => onCard({ teamIdx, card: 'red', playerNumber: 0 })))] })] }) }))] }), POSITION_UI_ORDER.map((pos) => {
                        const num = team.onField[pos];
                        const name = num ? (team.squad[num - 1]?.name || "") : "";
                        const isRed = !!(num && redSet.has(num));
                        const isSin = !!(num && sinBinSet.has(num));
                        const open = !!(num && expandedNumber === num);
                        return (_jsxs("div", { className: `w-full border rounded-xl ${open ? 'ring-2 ring-black' : ''}`, children: [_jsxs("button", { className: `w-full text-left p-2 flex items-center justify-between ${!num ? 'bg-gray-50' : 'bg-white'} rounded-xl`, onClick: () => num && !isRed && !isSin && setExpandedNumber(num), disabled: !num || isRed || isSin, children: [_jsxs("div", { children: [_jsxs("div", { className: "text-xs uppercase text-gray-500", children: [POSITIONS[pos], " ", ' (#' + (pos + 1) + ')'] }), _jsxs("div", { className: "text-base font-semibold", children: [num ? `#${num}` : '—', " ", name ? `· ${name}` : ''] })] }), _jsxs("div", { className: "text-xs", children: [isRed ? _jsx("span", { className: "px-2 py-1 rounded bg-red-100 text-red-700", children: "RED" }) : null, !isRed && isSin ? _jsx("span", { className: "px-2 py-1 rounded bg-yellow-100 text-yellow-700", children: "SIN-BIN" }) : null] })] }), open && (_jsx("div", { className: "p-2 pt-0", children: _jsxs("div", { className: "grid grid-cols-2 gap-2", children: [_jsxs("div", { className: "grid grid-cols-1 gap-2", children: [Btn('Point (Play)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'point', via: 'play', playerNumber: num }))), Btn('Goal (Play)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'goal', via: 'play', playerNumber: num }))), Btn('Yellow Card', 'bg-yellow-400', () => logThenClose(() => onCard({ teamIdx, card: 'yellow', playerNumber: num })))] }), _jsxs("div", { className: "grid grid-cols-1 gap-2", children: [Btn('Point (Free)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'point', via: 'free', playerNumber: num }))), Btn('Goal (Free)', 'bg-gray-900 text-white', () => logThenClose(() => onScore({ teamIdx, kind: 'goal', via: 'free', playerNumber: num }))), Btn('Red Card', 'bg-red-600 text-white', () => logThenClose(() => onCard({ teamIdx, card: 'red', playerNumber: num })))] })] }) }))] }, pos));
                    })] }), _jsxs("div", { className: "border-t pt-3", children: [_jsx("div", { className: "font-semibold mb-2", children: "Substitution" }), _jsx(SubForm, { team: team, onSub: (inN, outN) => onSub({ teamIdx, inNumber: inN, outNumber: outN }), benchNumbers: benchNumbers })] }), _jsxs("div", { className: "border-t pt-3", children: [_jsx("div", { className: "font-semibold mb-2", children: "Move / Swap / Rotate" }), _jsx(MoveForm, { team: team, selectedNumber: expandedNumber || undefined, onMove: (src, tp) => onMove({ teamIdx, sourceNumber: src, targetPos: tp }) })] })] }));
}
